// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name,
  latitude,
  longitude,
  phone_number,
  status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, full_name, phone_number, latitude, longitude, address, is_family, created_at, status
`

type CreateUserParams struct {
	FullName    sql.NullString `json:"full_name"`
	Latitude    float64        `json:"latitude"`
	Longitude   float64        `json:"longitude"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Status      NullUserStatus `json:"status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.Latitude,
		arg.Longitude,
		arg.PhoneNumber,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.IsFamily,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, phone_number, latitude, longitude, address, is_family, created_at, status FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.IsFamily,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getUserByNumber = `-- name: GetUserByNumber :one
SELECT id, full_name, phone_number, latitude, longitude, address, is_family, created_at, status FROM users
WHERE phone_number = $1 LIMIT 1
`

func (q *Queries) GetUserByNumber(ctx context.Context, phoneNumber sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.IsFamily,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, phone_number, latitude, longitude, address, is_family, created_at, status FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.PhoneNumber,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.IsFamily,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
    SET latitude = $2, longitude = $3, full_name = $4, status = $5
WHERE id = $1
RETURNING id, full_name, phone_number, latitude, longitude, address, is_family, created_at, status
`

type UpdateUserParams struct {
	ID        int64          `json:"id"`
	Latitude  float64        `json:"latitude"`
	Longitude float64        `json:"longitude"`
	FullName  sql.NullString `json:"full_name"`
	Status    NullUserStatus `json:"status"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Latitude,
		arg.Longitude,
		arg.FullName,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.IsFamily,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users 
    SET full_name = $2, status = $3
WHERE id = $1
RETURNING id, full_name, phone_number, latitude, longitude, address, is_family, created_at, status
`

type UpdateUserNameParams struct {
	ID       int64          `json:"id"`
	FullName sql.NullString `json:"full_name"`
	Status   NullUserStatus `json:"status"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserName, arg.ID, arg.FullName, arg.Status)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.IsFamily,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
